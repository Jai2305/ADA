# include<stdio.h>
# include<stdlib.h>
void push(int ele,int*s,int n,int stack[])
{
    if(*s>=n)
    {
        printf("stack full") ;
        return ;
    }
    stack[*s]=ele ;
    *s=*s+1 ;
}
int pull(int*s,int n,int stack[])
{
    int r ;
    if(*s<=0)
    {
        printf("stack empty") ;
        return -9999;
    }
    *s=*s-1 ;
    r=stack[*s] ;
    return r ;
}
int main()
{
    int n ;
    int head =0 ;
    int str ;
    int f ;
    printf("enter the number of vertices \n") ;
    scanf("%d",&n) ;
    int visit[n] ;
    int stack[n] ;
    for(int x=0;x<n;x++)
    {
        visit[x]=0 ;
    }
    printf("enter the adjacency matrix \n") ;
    int adj[n][n] ;
    for(int x=0;x<n;x++)
    {
        for(int y=0;y<n;y++)
        {
            scanf("%d",&adj[x][y]) ; 
        }
    }
    printf("enter the starting vertex \n") ;
    scanf("%d",&str) ;

    printf("%d ",str+1) ;
    push(str,&head, n,stack) ;
    visit[str]=1 ;
    f=str ;
    int count=-1 ;
    while(f!=-9999)
    {
        count=-1 ;
        for(int y=0;y<n;y++)
        {
            if(adj[f][y]==1 && visit[y]==0)
            {
                push(y,&head, n,stack) ;
                visit[y]=1 ;
                printf("%d ",y+1) ;
                f=y ;
                count++ ;
            }
        }
        if(head==0 && count==-1)
        {
            f=-9999 ;
            break ;
        }
        if(count==-1)
        {
            f=pull(&head, n, stack) ;
        }
    }
    printf("\n") ;
    count=-1 ;
    for(int x=0;x<n;x++)
    {
        if(visit[x]==0)
        {
            count++ ;
            break ;
        }
    }
    if(count==-1)
    {
        printf("graph is connected \n") ;
    }
    else
    {
        printf("disconnected \n") ;
    }


}
